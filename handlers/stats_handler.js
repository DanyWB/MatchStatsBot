const db = require('../db/connect');

module.exports = async function statsHandler(bot) {
  bot.callbackQuery(/^stat:match:(\d+)$/, async (ctx) => {
    const match_id = Number(ctx.match[1]);
    ctx.session.temp.match_id = match_id;

    await ctx.answerCallbackQuery();
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÅ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ä—è–¥', callback_data: 'stat:mode:all' }],
          [{ text: 'üéØ –í—ã–±–∏—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data: 'stat:mode:one' }],
        ]
      }
    });
  });

  bot.callbackQuery('stat:mode:all', async (ctx) => {
    try {
      const attrs = await db('attributes')
        .join('attribute_groups', 'attributes.group_id', 'attribute_groups.id')
        .select(
          'attributes.id',
          'attributes.name',
          'attribute_groups.name as group_name'
        );
  
      if (!attrs.length) {
        return ctx.reply('‚ö†Ô∏è –ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.');
      }
  
      const match = await db('matches')
        .join('teams as t1', 'matches.team1_id', 't1.id')
        .join('teams as t2', 'matches.team2_id', 't2.id')
        .where('matches.id', ctx.session.temp.match_id)
        .select('t1.name as team1', 't2.name as team2')
        .first();
  
      if (!match) {
        ctx.session = null;
        return ctx.reply('‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
  
      ctx.session.temp.attributes = attrs;
      ctx.session.temp.attr_index = 0;
      ctx.session.temp.mode = 'all';
      ctx.session.temp.team2_name = match.team2;
      ctx.session.await_field = 'stat_value_team1';
  
      const current = attrs[0];
      await ctx.answerCallbackQuery();
  
      return ctx.reply(
        `üìä *${current.group_name} ‚Üí ${current.name}*\n` +
        `–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã *${match.team1}*:`,
        { parse_mode: 'Markdown' }
      );
  
    } catch (err) {
      console.error('stat:mode:all error:', err);
      ctx.session = null;
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.');
    }
  });
  
  bot.callbackQuery('stat:mode:one', async (ctx) => {
    const attrs = await db('attributes')
      .join('attribute_groups', 'attributes.group_id', 'attribute_groups.id')
      .select('attributes.id', 'attributes.name', 'attribute_groups.name as group_name');

    if (!attrs.length) {
      return ctx.reply('‚ö†Ô∏è –ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.');
    }

    const buttons = attrs.map(attr => [{
      text: `${attr.group_name} ‚Üí ${attr.name}`,
      callback_data: `stat:attr:${attr.id}`,
    }]);

    ctx.session.temp.mode = 'one';
    ctx.session.temp.attributes = attrs;
    await ctx.answerCallbackQuery();
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:', {
      reply_markup: { inline_keyboard: buttons },
    });
  });

  bot.callbackQuery(/^stat:attr:(\d+)$/, async (ctx) => {
    try {
      const attr_id = Number(ctx.match[1]);
      ctx.session.temp.current_attr_id = attr_id;
      ctx.session.await_field = 'stat_value_team1';
  
      const attribute = await db('attributes')
        .join('attribute_groups', 'attributes.group_id', 'attribute_groups.id')
        .where('attributes.id', attr_id)
        .select(
          'attributes.name as attr_name',
          'attributes.type',
          'attribute_groups.name as group_name'
        )
        .first();

      const match = await db('matches')
        .join('teams as t1', 'matches.team1_id', 't1.id')
        .join('teams as t2', 'matches.team2_id', 't2.id')
        .where('matches.id', ctx.session.temp.match_id)
        .select('t1.name as team1', 't2.name as team2')
        .first();
  
      if (!attribute || !match) {
        ctx.session = null;
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞—Ç—Ä–∏–±—É—Ç –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.');
      }
  
      // —Å–æ—Ö—Ä–∞–Ω–∏–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã 2 –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
      ctx.session.temp.team2_name = match.team2;
      ctx.session.temp.attr_type = attribute.type; 
      await ctx.answerCallbackQuery();
  
      return ctx.reply(
        `üìä *${attribute.group_name} ‚Üí ${attribute.attr_name}*\n` +
        `–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã *${match.team1}*:`,
        { parse_mode: 'Markdown' }
      );
  
    } catch (err) {
      console.error('‚ùå stat:attr error:', err);
      ctx.session = null;
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ç—Ä–∏–±—É—Ç–∞.');
    }
  });
  bot.callbackQuery(/^editstat:match:(\d+)$/, async (ctx) => {
    const match_id = Number(ctx.match[1]);
    ctx.session.temp.match_id = match_id;

    await ctx.answerCallbackQuery();
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥—Ä—è–¥', callback_data: 'editstat:mode:all' }],
          [{ text: 'üéØ –í—ã–±–∏—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data: 'editstat:mode:one' }],
        ]
      }
    });
  });

  bot.callbackQuery('editstat:mode:all', async (ctx) => {
    try {
      const match_id = ctx.session.temp.match_id;
  
      const attributes = await db('attributes')
        .join('attribute_groups', 'attributes.group_id', 'attribute_groups.id')
        .select('attributes.id', 'attributes.name', 'attribute_groups.name as group_name');
  
      const stats = await db('match_stats')
        .where({ match_id })
        .select('attribute_id', 'value_team1', 'value_team2');
  
      const match = await db('matches')
        .join('teams as t1', 'matches.team1_id', 't1.id')
        .join('teams as t2', 'matches.team2_id', 't2.id')
        .where('matches.id', match_id)
        .select('t1.name as team1', 't2.name as team2')
        .first();
  
      if (!match) {
        ctx.session = null;
        return ctx.reply('‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
  
      const existing = {};
      stats.forEach(s => {
        existing[s.attribute_id] = s;
      });
  
      ctx.session.temp.mode = 'all';
      ctx.session.temp.attributes = attributes;
      ctx.session.temp.attr_index = 0;
      ctx.session.temp.existing = existing;
      ctx.session.temp.team1_name = match.team1;
      ctx.session.temp.team2_name = match.team2;
      ctx.session.await_field = 'stat_value_team1';
  
      const current = attributes[0];
      const currentStat = existing[current.id];
  
      const prefix = currentStat
        ? `üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n*${match.team1}*: ${currentStat.value_team1 || '-'}  |  *${match.team2}*: ${currentStat.value_team2 || '-'}\n\n`
        : '';
  
      await ctx.answerCallbackQuery();
      await ctx.reply(
        `${prefix}‚úèÔ∏è *${current.group_name} ‚Üí ${current.name}*\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã *${match.team1}*:`,
        { parse_mode: 'Markdown' }
      );
    } catch (err) {
      console.error('editstat:mode:all error:', err);
      ctx.session = null;
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
  });
  

  bot.callbackQuery('editstat:mode:one', async (ctx) => {
    const match_id = ctx.session.temp.match_id;
    const attributes = await db('attributes')
      .join('attribute_groups', 'attributes.group_id', 'attribute_groups.id')
      .select('attributes.id', 'attributes.name', 'attribute_groups.name as group_name');

    const stats = await db('match_stats')
      .where({ match_id })
      .select('attribute_id', 'value_team1', 'value_team2');

    const existing = {};
    stats.forEach(s => { existing[s.attribute_id] = s; });

    ctx.session.temp.mode = 'one';
    ctx.session.temp.attributes = attributes;
    ctx.session.temp.existing = existing;

    const buttons = attributes.map(attr => [{
      text: `${attr.group_name} ‚Üí ${attr.name}`,
      callback_data: `editstat:attr:${attr.id}`,
    }]);

    await ctx.answerCallbackQuery();
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      reply_markup: { inline_keyboard: buttons },
    });
  });

  bot.callbackQuery(/^editstat:attr:(\d+)$/, async (ctx) => {
    try {
      const attr_id = Number(ctx.match[1]);
      ctx.session.temp.current_attr_id = attr_id;
      ctx.session.await_field = 'stat_value_team1';
  
      // –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç –ø–æ ID –≤ —Å–ø–∏—Å–∫–µ
      const attr = ctx.session.temp.attributes.find(a => a.id === attr_id);
      if (!attr) {
        return ctx.reply('‚ùå –ê—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
  
      ctx.session.temp.attr_type = attr.type; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –¥–ª—è –ª–æ–≥–∏–∫–∏ –¥–∞–ª–µ–µ
  
      const current = ctx.session.temp.existing?.[attr_id];
      const team1 = ctx.session.temp.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1';
      const team2 = ctx.session.temp.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2';
  
      let prefix = '';
      if (current) {
        prefix += `üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n`;
        prefix += `*${team1}*: ${current.value_team1 || '-'}  |  *${team2}*: ${current.value_team2 || '-'}`;
        if (attr.type === 'triple') {
          prefix += `  |  *–û–±—â–µ–µ*: ${current.value_total || '-'}`;
        }
        prefix += `\n\n`;
      }
  
      await ctx.answerCallbackQuery();
  
      return ctx.reply(
        `${prefix}‚úèÔ∏è *${attr.group_name} ‚Üí ${attr.name}*\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã *${team1}*:`,
        { parse_mode: 'Markdown' }
      );
    } catch (err) {
      console.error('editstat:attr error:', err);
      ctx.session = null;
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.');
    }
  });
  
  
};
